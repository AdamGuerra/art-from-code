---
title: "<br>ART FROM CODE"
author: "Danielle Navarro<br><br><br><br>Wifi: &nbsp; Username: conf22 &nbsp; Password: together!"
title-slide-attributes:
    data-background-image: "../img/image4.jpg"
    data-background-size: cover
execute:
  echo: true
  fig-width: 6
  fig-height: 6
format: 
  revealjs:
    theme: dark
    footer: "[art-from-code.netlify.app](https://art-from-code.netlify.app)"
---

```{r}
#| include: false

# can't seem to make this work in the yaml so...
knitr::opts_chunk$set(dev.args = list(bg="#191919"))

# save the built-in output hook
hook_output <- knitr::knit_hooks$get("output")

# set a new output hook to truncate text output
knitr::knit_hooks$set(output = function(x, options) {
  if (!is.null(n <- options$out.lines)) {
    x <- xfun::split_lines(x)
    if (length(x) > n) {
      # truncate the output
      x <- c(head(x, n), "...\n")
    }
    x <- paste(x, collapse = "\n")
  }
  hook_output(x, options)
})
```

```{r packages, include=FALSE}
library(ggplot2)
library(tibble)
library(dplyr)
library(ggthemes)
library(scales)
```

## Facilities
	
- Gender neutral bathroom: 
    - river side of Potomac Ballroom
- Meditation room: 
    - National Harbor 9. (8am - 5pm, Mon - Thurs)
- Lactation room: 
    - Potomac Dressing Room. (8am - 5pm, Mon - Thurs) 
    - The hotel also has a dedicated room behind reception

## Code of conduct

- The Code of Conduct and COVID policies can be found at [www.rstudio.com/conference/2022/2022-conf-code-of-conduct](https://www.rstudio.com/conference/2022/2022-conf-code-of-conduct/). Please review them carefully
- You can report Code of Conduct violations in person, by email, or by phone. Please see the policy linked above for contact information

## Mask policy

- RStudio requires that you wear a mask that fully covers your mouth and nose at all times in all public spaces 
- We strongly recommend that you use a correctly fitted N95, KN95, or similar particulate filtering mask
- We will have a limited supply available upon request

## Photography

- Red lanyard = Does not wish to be photographed 
- Please note lanyard colors before taking a photo
- Respect their choices

## Workshop housekeeping

- Written tutorial, data sets, exercises
    - Website: [art-from-code.netlify.app](https://art-from-code.netlify.app)
    - GitHub: [github.com/rstudio-conf-2022/art-from-code](https://github.com/rstudio-conf-2022/art-from-code)
    - Sticky notes: <span style="color: orange">orange = "all good"</span>, <span style="color: purple">purple = "please assist"</span>
- Instructors: 
    - Danielle Navarro
    - Meghan Harris
    - Jaclyn Janis 

## Schedule for day 1

| Time          | Activity                                                                              |
| :------------ | :------------------------------------------------------------------------------------ |
| 09:00 - 10:30 | Session 1: [Get started](https://art-from-code.netlify.com/day-1/session-1)           |
| 10:30 - 11:00 | *Coffee break*                                                                        |
| 11:00 - 12:30 | Session 2: [Spatial noise tricks](https://art-from-code.netlify.com/day-1/session-2)  |
| 12:30 - 13:30 | *Lunch break*                                                                         |
| 13:30 - 15:00 | Session 3: [Polygon tricks](https://art-from-code.netlify.com/day-1/session-3)        |
| 15:00 - 15:30 | *Coffee break*                                                                        |
| 15:30 - 17:00 | Session 4: [Shading tricks](https://art-from-code.netlify.com/day-1/session-4)        |

## Schedule for day 2

| Time          | Activity                                                                                  |
| :------------ | :---------------------------------------------------------------------------------------- |
| 09:00 - 10:30 | Session 1: [Iterated function systems](https://art-from-code.netlify.com/day-2/session-1) |
| 10:30 - 11:00 | *Coffee break*                                                                            |
| 11:00 - 12:30 | Session 2: [Tiles and tesselations](https://art-from-code.netlify.com/day-2/session-2)    |
| 12:30 - 13:30 | *Lunch break*                                                                             |
| 13:30 - 15:00 | Session 3: [Pixel shaders](https://art-from-code.netlify.com/day-2/session-3)             |
| 15:00 - 15:30 | *Coffee break*                                                                            |
| 15:30 - 17:00 | Session 4: [Wrap up](https://art-from-code.netlify.com/day-2/session-4)                   |

## Set up

### Option 1: Local

```{r, eval=FALSE}
# create, download, and open project...
usethis::create_from_github(
  repo_spec = "rstudio-conf-2022/art-from-code", 
  destdir = "wherever/you/would/like"
)

# within the project...
remotes::install_deps()
```


<br>

### Option 2: RStudio cloud 

[rstudio.cloud/spaces/250954](https://rstudio.cloud/spaces/250954)


# Preemptive apology {background-image="../img/ash_14_006.png"}

I may not be at my best during the teaching period due to an incident during my travel. Some patience may be needed!


# Say hello! {background-image="../img/nebula_04_153_5000.jpg"}

# Navigating the content {background-image="../img/pollen_55_5739.jpg"}

Art is personal. So I want you to have scope to explore!


# [Get started](https://art-from-code.netlify.com/day-1/session-1)

Session 1: Hands on introduction to generative art. Make your own pieces using ggplot2 and dplyr

## Get started: Topics

- [Art is theft](https://art-from-code.netlify.app/day-1/session-1/#art-is-theft)
- [Technique and art functions](https://art-from-code.netlify.app/day-1/session-1/#technique)
- [Colour and palettes](https://art-from-code.netlify.app/day-1/session-1/#colour)
- [Composition and grammar](https://art-from-code.netlify.app/day-1/session-1/#composition)

## [Art is theft](https://art-from-code.netlify.app/day-1/session-1/#art-is-theft)

::: {layout-ncol=3}
![Typical ggplot2 output](../day-1/session-1/index_files/figure-html/familiar-ggplot-1.png)

![Slightly styled output](../day-1/session-1/index_files/figure-html/tweak-ggplot-1.png)

![Now is it art?](../day-1/session-1/index_files/figure-html/tweak-ggplot-more-1.png)

:::

## [Technique and art functions](https://art-from-code.netlify.app/day-1/session-1/#technique)

``` r
polar_art(seed = 1, n = 500, palette = c("antiquewhite", "orange", "bisque"))
polar_art(seed = 1, n = 500, palette = c("red", "black", "white"))
polar_art(seed = 2, n = 50, palette = c("red", "black", "white"))
```

::: {layout-ncol=3}
![Output 1](../day-1/session-1/index_files/figure-html/art-functions-1.png)

![Output 2](../day-1/session-1/index_files/figure-html/art-functions-2.png)

![Output 3](../day-1/session-1/index_files/figure-html/art-functions-3.png)
:::

## [Colour and palettes](https://art-from-code.netlify.app/day-1/session-1/#colour)

```{r}
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}
```

```{r, echo=FALSE}
#| layout-ncol: 2
show_col(sample_canva(1))
show_col(sample_canva(2))
```


## [Composition and grammar](https://art-from-code.netlify.app/day-1/session-1/#composition)


::: {layout-ncol=3}
![Multiple data](../day-1/session-1/index_files/figure-html/compositionality-1.png)

![Multiple copies](../day-1/session-1/index_files/figure-html/compositionality-2-1.png)

![Trickery with linetypes](../day-1/session-1/index_files/figure-html/compositionality-3-1.png)

:::


# [Spatial noise tricks](https://art-from-code.netlify.com/day-1/session-2)

Session 2: Multidimensional noise generators. Flow fields, fractals, and more using the ambient package

## Spatial noise: Topics

- [Sampling spatial patterns](https://art-from-code.netlify.app/day-1/session-2/#sampling-spatial-patterns)
- [Our first ambient artwork](https://art-from-code.netlify.app/day-1/session-2/#our-first-ambient-artwork)
- [Our first system](https://art-from-code.netlify.app/day-1/session-2/#our-first-system)
- [Using dplyr with ambient](https://art-from-code.netlify.app/day-1/session-2/#why-dplyr-is-a-girls-best-friend)
- [Fractals in ambient](https://art-from-code.netlify.app/day-1/session-2/#fractals)
- [Curl fields](https://art-from-code.netlify.app/day-1/session-2/#curl-of-a-spatial-noise-pattern)
- [Curl of fractal patterns](https://art-from-code.netlify.app/day-1/session-2/#curl-of-a-fractal-pattern)

##  [Sampling spatial patterns](https://art-from-code.netlify.app/day-1/session-2/#sampling-spatial-patterns)


::: {layout-ncol=3}

![A spatial pattern expressed as a matrix of zeros, with one column and one row set to 1](../img/ascii-cross.png)

![Same idea as an image](../day-1/session-2/index_files/figure-html/random-crosses-1.png)

<br><br>What if we want fancier patterns? Use ambient!

:::

## [Our first ambient artwork](https://art-from-code.netlify.app/day-1/session-2/#our-first-ambient-artwork)


::: {layout-ncol=2}

- The recipe:
  - Create blank "canvas" with `long_grid()`
  - Add "paint" with `gen_perlin()`
  - Plot image with `geom_raster()`

![](../day-1/session-2/index_files/figure-html/simple-perlin-art-3.png)

:::

## [Our first system](https://art-from-code.netlify.app/day-1/session-2/#our-first-system)

::: {layout-ncol=2}

- Writing art functions:
  - First, play!
  - Then: what varies?
  - Variable things are arguments

![](../day-1/session-2/index_files/figure-html/example-art-frequency-1.png)

:::


## [Using dplyr with ambient](https://art-from-code.netlify.app/day-1/session-2/#why-dplyr-is-a-girls-best-friend)

``` r
blank_canvas |> 
  mutate(
    lf_noise = gen_simplex(x, y, frequency = 1, seed = 1234),
    mf_noise = gen_simplex(x, y, frequency = 20, seed = 1234),
    hf_noise = gen_simplex(x, y, frequency = 99, seed = 1234),
    paint = lf_noise + mf_noise + hf_noise
  )
```

::: {layout-ncol=3}

![](../day-1/session-2/index_files/figure-html/dplyr-art-example-1-1.png)

![](../day-1/session-2/index_files/figure-html/dplyr-art-example-2-1.png)

![](../day-1/session-2/index_files/figure-html/dplyr-art-example-3-1.png)

:::

## [Fractals in ambient](https://art-from-code.netlify.app/day-1/session-2/#fractals)

``` r
fractal_art(ridged, gen_simplex, seed = 2, octaves = 1)
fractal_art(ridged, gen_simplex, seed = 2, octaves = 2)
fractal_art(ridged, gen_simplex, seed = 2, octaves = 20)
```

::: {layout-ncol=3}

![](../day-1/session-2/index_files/figure-html/fractal-art-ridged-octaves-1.png)

![](../day-1/session-2/index_files/figure-html/fractal-art-ridged-octaves-2.png)

![](../day-1/session-2/index_files/figure-html/fractal-art-ridged-octaves-3.png)

:::



## [Curl fields](https://art-from-code.netlify.app/day-1/session-2/#curl-of-a-spatial-noise-pattern)


::: {layout-ncol=3}

![Simplex noise as surface](../day-1/session-2/index_files/figure-html/smol-simplex-2.png)

![Slope of the surface](../day-1/session-2/index_files/figure-html/smol-slope-1.png)

![Curl of the surface](../day-1/session-2/index_files/figure-html/smol-curl-1.png)

:::


## [Curl of fractal patterns](https://art-from-code.netlify.app/day-1/session-2/#curl-of-a-fractal-pattern)


::: {layout-ncol=3}

![](../day-1/session-2/index_files/figure-html/curl-art-examples-1.png)

![](../day-1/session-2/index_files/figure-html/curl-art-octaves-3.png)

![](../day-1/session-2/index_files/figure-html/curl-art-examples-2-1.png)

:::


# [Polygon tricks](https://art-from-code.netlify.com/day-1/session-3)

Session 3: Create textures with recursive polygon deformation, draw wonky hearts as animated gifs, and convert boring lines to textured strokes

## Polygon tricks: Topics

- [Semi-transparent polygons](https://art-from-code.netlify.app/day-1/session-3/#semi-transparent-polygons)
- Optional: [Growing polygons a bit faster](https://art-from-code.netlify.app/day-1/session-3/#growing-polygons-faster)
- Examples: [Splotches](https://art-from-code.netlify.app/day-1/session-3/#using-the-method-splotches) and [smudged hexagons](https://art-from-code.netlify.app/day-1/session-3/#using-the-method-smudged-hexagons)
- [Slighly misshapen objects](https://art-from-code.netlify.app/day-1/session-3/#slightly-misshapen-objects)
- [Perlin blobs](https://art-from-code.netlify.app/day-1/session-3/#perlin-blobs) and [Perlin hearts](https://art-from-code.netlify.app/day-1/session-3/#perlin-hearts)
- [Animated Perlin hearts](https://art-from-code.netlify.app/day-1/session-3/#animated-perlin-hearts)
- [Textured lines](https://art-from-code.netlify.app/day-1/session-3/#textured-lines)


## [Semi-transparent polygons](https://art-from-code.netlify.app/day-1/session-3/#semi-transparent-polygons)

### Part 1: Growing polygons by edge insertion

::: {layout-ncol=3}

![](../day-1/session-3/index_files/figure-html/polygon-generation-1.png)

![](../day-1/session-3/index_files/figure-html/polygon-generation-2.png)

![](../day-1/session-3/index_files/figure-html/polygon-generation-3.png)

:::



## [Semi-transparent polygons](https://art-from-code.netlify.app/day-1/session-3/#semi-transparent-polygons)

### Part 2: Overlaying many nearly-transparent polygons

![](../day-1/session-3/index_files/figure-html/fast-polygon-layering-1.png)



## Optional: [Growing polygons a bit faster](https://art-from-code.netlify.app/day-1/session-3/#growing-polygons-faster)

- The TL;DR to a lot of code:
  - Growing vectors in a loop is very slow
  - Adding to lists in a loop is less slow

## Example: [Splotches](https://art-from-code.netlify.app/day-1/session-3/#using-the-method-splotches) 

``` r
show_multipolygon(splotch_1, "#f51720", alpha = .2)
show_multipolygon(splotch_2, "#f8d210", alpha = .2)
show_multipolygon(splotch_3, "#059dc0", alpha = .2)
show_multipolygon(splotch_4, "#81b622", alpha = .2)
```

::: {layout-ncol=4}

![](../day-1/session-3/index_files/figure-html/splotch-1.png)

![](../day-1/session-3/index_files/figure-html/splotch-2.png)

![](../day-1/session-3/index_files/figure-html/splotch-3.png)

![](../day-1/session-3/index_files/figure-html/splotch-4.png)


:::




## Example: [Smudged hexagons](https://art-from-code.netlify.app/day-1/session-3/#using-the-method-smudged-hexagons) {background-image="../day-1/session-3/index_files/figure-html/layered-smudged-hexagon-1.png"}



## [Slightly misshapen objects](https://art-from-code.netlify.app/day-1/session-3/#slightly-misshapen-objects)

![](../day-1/session-3/hand-drawn-hearts.jpg)

## [Perlin blobs](https://art-from-code.netlify.app/day-1/session-3/#perlin-blobs)

::: {layout-ncol=2}

``` r
  tibble(
    angle = seq(0, 2*pi, length.out = n),
    x_base = cos(angle),
    y_base = sin(angle),
    radius = fracture(
      x = x_base, 
      y = y_base, 
      freq_init = freq_init,
      noise = gen_perlin, 
      fractal = fbm, 
      octaves = octaves
    ) |>
      normalise_radius(r_min, r_max),
    x = radius * x_base,
    y = radius * y_base
  )
```


![](../day-1/session-3/index_files/figure-html/show-perlin-blobs-2.png)

:::

## [Perlin hearts](https://art-from-code.netlify.app/day-1/session-3/#perlin-hearts)

::: {layout-ncol=2}

``` r
heart_x <- function(angle) {
  x <- (16 * sin(angle) ^ 3) / 17
  return(x - mean(x))
}

heart_y <- function(angle) {
  y <- (13 * cos(angle) - 
      5 * cos(2 * angle) - 
      2 * cos(3 * angle) -
          cos(4 * angle)) / 17
  return(y - mean(y))
}
```

![](../day-1/session-3/index_files/figure-html/show-perlin-hearts-2.png)

:::


## [Animated Perlin hearts](https://art-from-code.netlify.app/day-1/session-3/#animated-perlin-hearts)

::: {layout-ncol=2}

- The "gifski" recipe:
  - Write a function to generate one plot ("frame")
  - Call it repeatedly in `save_gif()`
  
![](../day-1/session-3/animated-perlin-heart-100.gif)
:::




## [Textured lines](https://art-from-code.netlify.app/day-1/session-3/#textured-lines)




::: {layout-ncol=3}

- Basic recipe:
  - Dots not lines
  - But have many noisy copies
  
  
![original](../day-1/session-3/index_files/figure-html/smooth-path-1.png)

![textured](../day-1/session-3/index_files/figure-html/smooth-path-textured-1.png)

:::





# [Shading tricks](https://art-from-code.netlify.com/day-1/session-4) 

Session 4: Use rayshader to add depth to 2D plots, and generate 3D graphics from generative art

## Shading tricks: Topics

- [Rayshader art](https://art-from-code.netlify.app/day-1/session-4/#rayshader-art)
- [Spatial noise with shadows](https://art-from-code.netlify.app/day-1/session-4/#shadowed-noise-fields)
- [Fractured terrain](https://art-from-code.netlify.app/day-1/session-4/#fractured-terrain)
- (Optional) [Three dimensional art](https://art-from-code.netlify.app/day-1/session-4/#three-dimensional-art)


## [Rayshader art](https://art-from-code.netlify.app/day-1/session-4/#rayshader-art)

::: {layout-ncol=2}

``` r
circle_shadow <- ray_shade(
  heightmap = circle_array,
  sunaltitude = 15, 
  sunangle = 135,
  zscale = .01,
  multicore = TRUE
)

plot_map(circle_shadow, rotate = 270)
```

![](../day-1/session-4/index_files/figure-html/circle-shadow-map-1.png)

:::




## [Rayshader art](https://art-from-code.netlify.app/day-1/session-4/#rayshader-art)

::: {layout-ncol=2}

``` r
circle_scape <- circle_array |> 
  height_shade() |>
  add_shadow(
    shadowmap = circle_shadow,
    max_darken = .1
  )

plot_map(circle_scape, rotate = 270)
```

![](../day-1/session-4/index_files/figure-html/circle-render-1.png)

:::


## [Spatial noise with shadows](https://art-from-code.netlify.app/day-1/session-4/#shadowed-noise-fields)

::: {layout-ncol=3}


![](../day-1/session-4/index_files/figure-html/more-rayshade-art-1.png)

![](../day-1/session-4/index_files/figure-html/more-rayshade-art-2.png)

![](../day-1/session-4/index_files/figure-html/more-rayshade-art-3.png)

:::


## [Fractured terrain](https://art-from-code.netlify.app/day-1/session-4/#fractured-terrain)

::: {layout-ncol=3}

![](../day-1/session-4/index_files/figure-html/abstract-ice-floes-1.png)

![](../day-1/session-4/index_files/figure-html/abstract-ice-floes-2.png)

![](../day-1/session-4/index_files/figure-html/abstract-ice-floes-3.png)

:::

## (Optional) [Three dimensional art](https://art-from-code.netlify.app/day-1/session-4/#three-dimensional-art) {background-image="../day-1/session-4/ice_3d.png"}




# Welcome to Day 2

# [Iterated function systems](https://art-from-code.netlify.com/day-2/session-1)

Session 1: Embrace the chaotic joy of the fractal flame and render quickly with Rcpp. This one is a bit technical

## Iterated function systems: Topics

- (Extremely optional) [The tiresome formalism](https://art-from-code.netlify.app/day-2/session-1/#some-tiresome-formalism)
- [The Barnsley fern](https://art-from-code.netlify.app/day-2/session-1/#chaos-game-for-the-barnsley-fern)
- (Aside) [Regarding "happy accidents"](https://art-from-code.netlify.app/day-2/session-1/#happy-accidents)
- [Chaos game for unboxing](https://art-from-code.netlify.app/day-2/session-1/#chaos-game-for-unboxing)
- (Optional) [Faster chaos with Rcpp](https://art-from-code.netlify.app/day-2/session-1/#faster-chaos-with-rcpp)
- (Optional) [Even faster chaos with raster representation](https://art-from-code.netlify.app/day-2/session-1/#even-faster-chaos-with-raster-representation)




## [The Barnsley fern](https://art-from-code.netlify.app/day-2/session-1/#chaos-game-for-the-barnsley-fern)

![](../day-2/session-1/index_files/figure-html/transform-shaded-barnsley-fern-1.png)


## [Chaos game for unboxing](https://art-from-code.netlify.app/day-2/session-1/#chaos-game-for-unboxing)

::: {layout-ncol=3}

![](../day-2/session-1/index_files/figure-html/first-unboxing-art-1.png)

![](../day-2/session-1/index_files/figure-html/first-unboxing-art-2.png)

![](../day-2/session-1/index_files/figure-html/first-unboxing-art-3.png)

:::

## Let's just chat about...

- [The tiresome formalism](https://art-from-code.netlify.app/day-2/session-1/#some-tiresome-formalism)
- ["Happy accidents"](https://art-from-code.netlify.app/day-2/session-1/#happy-accidents)
- [The Rcpp stuff](https://art-from-code.netlify.app/day-2/session-1/#faster-chaos-with-rcpp) and the [other Rcpp stuff](https://art-from-code.netlify.app/day-2/session-1/#even-faster-chaos-with-raster-representation)


# [Tiles and tesselations](https://art-from-code.netlify.com/day-2/session-2) 

Session 2: Make lovely things by subdividing a rectangle, explore Voronoi tesselations, and have a passing encounter with Truchet tiles

## Tiles and tesselations: Topics

- [Rectangle subdivision](https://art-from-code.netlify.app/day-2/session-2/#rectangle-subdivision)
- [Mosaica](https://art-from-code.netlify.app/day-2/session-2/#mosaica)
- [Voronoi tesselation](https://art-from-code.netlify.app/day-2/session-2/#voronoi-tesselation)
- [Voronoi baroque, part 1](https://art-from-code.netlify.app/day-2/session-2/#studies-in-voronoi-baroque-part-i)
- (Optional) [Voronoi baroque, part 2](https://art-from-code.netlify.app/day-2/session-2/#studies-in-voronoi-baroque-part-ii)
- (Optional) [Truchet tiles](https://art-from-code.netlify.app/day-2/session-2/#truchet-tiles)


## [Rectangle subdivision](https://art-from-code.netlify.app/day-2/session-2/#rectangle-subdivision)

![](../day-2/session-2/index_files/figure-html/subdivision-extras-3.png)


## [Mosaica](https://art-from-code.netlify.app/day-2/session-2/#mosaica)

![](../day-2/session-2/index_files/figure-html/mosaica-1.png)

## [Voronoi tesselation](https://art-from-code.netlify.app/day-2/session-2/#voronoi-tesselation)

![](../day-2/session-2/index_files/figure-html/voronoi-tiles-double-1.png)


## [Voronoi baroque](https://art-from-code.netlify.app/day-2/session-2/#studies-in-voronoi-baroque-part-i)

![](../day-2/session-2/index_files/figure-html/voronoi-boxy-2-1.png)


## [Truchet tiles](https://art-from-code.netlify.app/day-2/session-2/#truchet-tiles)

![](../day-2/session-2/index_files/figure-html/second-truchet-1.png)


# [Pixel filters](https://art-from-code.netlify.com/day-2/session-3) 

Session 3: Manipulate ggplot objects as if they were raster graphics using ggfx: learn to dither, mask, displace, blend, and more. The flametree package makes as special guest appearance

## Pixel filters: topics

- [Prelude with flametree](https://art-from-code.netlify.app/day-2/session-3/#prelude)
- [Adding glow](https://art-from-code.netlify.app/day-2/session-3/#glow)
- [Dithering an image](https://art-from-code.netlify.app/day-2/session-3/#dither)
- [Applying a mask](https://art-from-code.netlify.app/day-2/session-3/#mask)
- [Displacement filters](https://art-from-code.netlify.app/day-2/session-3/#displace)
- [Image blends](https://art-from-code.netlify.app/day-2/session-3/#blend)



## [Prelude with flametree](https://art-from-code.netlify.app/day-2/session-3/#prelude)

::: {layout-ncol=2}

``` r
tree <- flametree_grow(
  seed = 1, 
  time = 9, 
  angle = c(-15, 15, 30)
)
tree |> 
  flametree_plot(
    background = "#222222", 
    palette = c("#ffffff", "#f652a0")
  )
```
![](../day-2/session-3/index_files/figure-html/flametree-plot-origin-1.png)

:::

## [Adding glow](https://art-from-code.netlify.app/day-2/session-3/#glow)

::: {layout-ncol=3}


![](../day-2/session-3/index_files/figure-html/outer-glow-1.png)

![](../day-2/session-3/index_files/figure-html/outer-glow-2.png)

![](../day-2/session-3/index_files/figure-html/outer-glow-3.png)

:::

## [Dithering an image](https://art-from-code.netlify.app/day-2/session-3/#dither)

::: {layout-ncol=2}

![](../day-2/session-3/index_files/figure-html/dither-1.png)

![](../day-2/session-3/index_files/figure-html/dither-2.png)

:::

## [Applying a mask](https://art-from-code.netlify.app/day-2/session-3/#mask)

::: {layout-ncol=2}

![](../day-2/session-3/index_files/figure-html/mask-1.png)

![](../day-2/session-3/index_files/figure-html/mask-2.png)

:::



## [Displacement filters](https://art-from-code.netlify.app/day-2/session-3/#displace)

::: {layout-ncol=2}

![](../day-2/session-3/index_files/figure-html/displace-1.png)

![](../day-2/session-3/index_files/figure-html/displace-2.png)

:::

## [Image blends](https://art-from-code.netlify.app/day-2/session-3/#blend)


![](../day-2/session-3/index_files/figure-html/blend-1.png)


# [Wrap up](https://art-from-code.netlify.com/day-2/session-4)

Session 4: In which we end things by making things up as we go along, because this is, after all, an art workshop!


