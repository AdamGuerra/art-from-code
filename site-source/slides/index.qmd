---
title: "ART FROM CODE"
author: "Danielle Navarro"
execute:
  echo: true
  fig-width: 6
  fig-height: 6
format: 
  revealjs:
    theme: dark
    footer: "[art-from-code.netlify.app](https://art-from-code.netlify.app)"
---

```{r}
#| include: false

# can't seem to make this work in the yaml so...
knitr::opts_chunk$set(dev.args = list(bg="#191919"))

# save the built-in output hook
hook_output <- knitr::knit_hooks$get("output")

# set a new output hook to truncate text output
knitr::knit_hooks$set(output = function(x, options) {
  if (!is.null(n <- options$out.lines)) {
    x <- xfun::split_lines(x)
    if (length(x) > n) {
      # truncate the output
      x <- c(head(x, n), "...\n")
    }
    x <- paste(x, collapse = "\n")
  }
  hook_output(x, options)
})
```

```{r packages, include=FALSE}
library(ggplot2)
library(tibble)
library(dplyr)
library(ggthemes)
```

## WiFi
	
- Username: conf22
- Password: together!

## Facilities
	
- Gender neutral bathroom: 
    - river side of Potomac Ballroom
- Meditation room: 
    - Potomac Dressing Room. (8am - 5pm, Mon - Thurs)
- Lactation room: 
    - National Harbor 9. (8am - 5pm, Mon - Thurs) 
    - The hotel also has a dedicated room behind reception

## Code of conduct

- The Code of Conduct and COVID policies can be found at [www.rstudio.com/conference/2022/2022-conf-code-of-conduct](https://www.rstudio.com/conference/2022/2022-conf-code-of-conduct/). Please review them carefully
- You can report Code of Conduct violations in person, by email, or by phone. Please see the policy linked above for contact information

## Mask policy

- RStudio requires that you wear a mask that fully covers your mouth and nose at all times in all public spaces 
- We strongly recommend that you use a correctly fitted N95, KN95, or similar particulate filtering mask
- We will have a limited supply available upon request

## Photography

- Red lanyard = Does not wish to be photographed 
- Please note lanyard colors before taking a photo
- Respect their choices

## Workshop housekeeping

- Written tutorial, data sets, exercises
    - Website: [art-from-code.netlify.app](https://art-from-code.netlify.app)
    - GitHub: [github.com/rstudio-conf-2022/art-from-code](https://github.com/rstudio-conf-2022/art-from-code)
- Instructors: 
    - Danielle Navarro

## Use the stickies!

- There are two coloured sticky notes
- Place a $COLOUR one on your laptop if all is well
- Place a $COLOUR one on your laptop if you'd like help
- This will make it easy for us to find you and help out!

## Schedule for day 1

| Time          | Activity                                                                              |
| :------------ | :------------------------------------------------------------------------------------ |
| 09:00 - 10:30 | Session 1: [Get started](https://art-from-code.netlify.com/day-1/session-1)           |
| 10:30 - 11:00 | *Coffee break*                                                                        |
| 11:00 - 12:30 | Session 2: [Spatial noise tricks](https://art-from-code.netlify.com/day-1/session-2)  |
| 12:30 - 13:30 | *Lunch break*                                                                         |
| 13:30 - 15:00 | Session 3: [Polygon tricks](https://art-from-code.netlify.com/day-1/session-3)        |
| 15:00 - 15:30 | *Coffee break*                                                                        |
| 15:30 - 17:00 | Session 4: [Shading tricks](https://art-from-code.netlify.com/day-1/session-4)        |

## Schedule, Day 2

| Time          | Activity                                                                                  |
| :------------ | :---------------------------------------------------------------------------------------- |
| 09:00 - 10:30 | Session 1: [Iterated function systems](https://art-from-code.netlify.com/day-2/session-1) |
| 10:30 - 11:00 | *Coffee break*                                                                            |
| 11:00 - 12:30 | Session 2: [Tiles and tesselations](https://art-from-code.netlify.com/day-2/session-2)    |
| 12:30 - 13:30 | *Lunch break*                                                                             |
| 13:30 - 15:00 | Session 3: [Pixel shaders](https://art-from-code.netlify.com/day-2/session-3)             |
| 15:00 - 15:30 | *Coffee break*                                                                            |
| 15:30 - 17:00 | Session 4: [Wrap up](https://art-from-code.netlify.com/day-2/session-4)                   |

## Installing packages

TBA

## Downloading materials

TBA

# Get Started

Session 1: Hands on introduction to generative art. Make your own pieces using ggplot2 and dplyr

## Using data science tools for art

```{r familiar-ggplot}
#| output-location: column
mpg |>
  ggplot(aes(
    x = displ, 
    y = hwy, 
    colour = drv
  )) + 
  geom_point()
```

## Using data science tools for art

```{r just-the-dots}
#| output-location: column
mpg |>
  ggplot(aes(
    x = displ, 
    y = hwy, 
    colour = drv, 
    size = cyl
  )) + 
  geom_point(
    show.legend = FALSE
  ) + 
  theme_void() + 
  scale_color_brewer()
```

## Using data science tools for art

```{r entirely-abstract}
#| output-location: column
mpg |>
  ggplot(aes(
    x = displ, 
    y = hwy, 
    colour = drv
  )) + 
  geom_point(
    show.legend = FALSE, 
    size = 4
  ) + 
  geom_point(
    show.legend = FALSE, 
    size = 1, 
    colour = "#222222"
  ) + 
  coord_polar() + 
  theme_void() + 
  scale_color_brewer()
```

## Your turn!

- Using only ggplot2 and the `mpg` data, create your own art 
- Don't think too hard, just do something in 3 minutes!

## Random data

```{r random-data}
#| output-location: slide
set.seed(1)
n <- 50
dat <- tibble(
  x0 = runif(n),
  y0 = runif(n),
  x1 = x0 + runif(n, min = -.2, max = .2),
  y1 = y0 + runif(n, min = -.2, max = .2),
  shade = runif(n), 
  size = runif(n)
)
dat
```

## ... Transformed to art

```{r coord-polar, dev.args=list(bg="#222222")}
#| output-location: column
dat |> 
  ggplot(aes(
    x = x0,
    y = y0,
    xend = x1,
    yend = y1,
    colour = shade,
    size = size
  )) +
  geom_segment(show.legend = FALSE) +
  coord_polar() +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_continuous(expand = c(0, 0)) + 
  scale_color_viridis_c() + 
  scale_size(range = c(0, 10)) + 
  theme_void()
```

## Our first system

```{r polar-art}
polar_art <- function(seed, n, palette) {
  
  set.seed(seed)
  
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n)
  )
  
  dat |> 
    ggplot(aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) +
    geom_segment(show.legend = FALSE) +
    coord_polar() +
    scale_y_continuous(expand = c(0, 0)) +
    scale_x_continuous(expand = c(0, 0)) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void()
}
```

## An output

```{r polar-art-out-1}
#| output-location: column
polar_art(
  seed = 1, 
  n = 500, 
  palette = c(
    "antiquewhite", 
    "orange", 
    "bisque"
  )
)
```


## Another output

```{r polar-art-out-2}
#| output-location: column
polar_art(
  seed = 2, 
  n = 50, 
  palette = c(
    "red", 
    "black", 
    "white"
  )
)
```


## Your turn!

# Spatial Noise Trickery

Session 2: Multidimensional noise generators. Flow fields, fractals, and more using the ambient package

# Polygon Trickery

Session 3: Create textures with recursive polygon deformation, draw wonky hearts as animated gifs, and convert boring lines to textured strokes

# Shading Trickery

Session 4: Use rayshader to add depth to 2D plots, and generate 3D graphics from generative art

# Welcome to Day 2

# Iterated Function Systems

Session 1: Embrace the chaotic joy of the fractal flame and render quickly with Rcpp. This one is a bit technical

# Tiles and Tesselations 

Session 2: Make lovely things by subdividing a rectangle, explore Voronoi tesselations, and have a passing encounter with Truchet tiles

# Pixel Filters

Session 3: Manipulate ggplot objects as if they were raster graphics using ggfx: learn to dither, mask, displace, blend, and more. The flametree package makes as special guest appearance

# Wrap Up

Session 4: TBA


