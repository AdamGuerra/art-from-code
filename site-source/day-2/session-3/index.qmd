---
title: "PIXEL FILTERS WITH GGFX"
---


```{r, message=FALSE}
library(dplyr)
library(tibble)
library(ggplot2)
library(scales)
library(ggforce)
library(ggthemes)
library(ggfx)
library(flametree)
library(ambient)
library(tictoc)
```

```{r sample-canva-2}
sample_canva2 <- function(seed = NULL, n = 4) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]] |>
    (\(x) colorRampPalette(x)(n))()  
}
```

```{r flametree-data, dev.args=list(bg="#222222")}
tree <- flametree_grow(seed = 1, time = 8, angle = c(-15, 15, 30))
tree
```

```{r flametree-plot, dev.args=list(bg="#222222")}
#| fig-width: 4
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
leaf <- tree |> 
  filter(id_time == max(id_time), id_step == 2)

palette <- sample_canva2(seed = 1)

canvas <- ggplot(mapping = aes(
  x = coord_x, 
  y = coord_y, 
  group = id_pathtree, 
  colour = seg_col, 
  size = seg_wid
)) + 
  scale_size_identity(guide = guide_none()) + 
  scale_color_gradientn(
    colours = palette,
    guide = guide_none()
  ) + 
  theme_void() + 
  coord_equal()

canvas +   
  geom_bezier(data = tree, lineend = "round") + 
  geom_point(data = leaf, size = 1.3, stroke = 0)
```


## Glow

```{r outer-glow, dev.args=list(bg="#222222")}
#| fig-width: 4
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: page
canvas +   
  geom_bezier(data = tree, lineend = "round") + 
  geom_point(data = leaf, size = 1.3, stroke = 0)
canvas +   
  geom_bezier(data = tree, lineend = "round") + 
  with_outer_glow(
    geom_point(data = leaf, size = 1.3, stroke = 0), 
    colour = palette[4]
  )
canvas +   
  geom_bezier(data = tree, lineend = "round") + 
  with_outer_glow(
    geom_point(data = leaf, size = 1.3, stroke = 0), 
    colour = palette[4], 
    sigma = 5,
    expand = 2
  )
```


```{r heart-formulas}
heart_x <- function(angle) {
  x <- (16 * sin(angle) ^ 3) / 17
  return(x - mean(x))
}

heart_y <- function(angle) {
  y <- (13 * cos(angle) - 5 * cos(2 * angle) - 2 * cos(3 * angle) -
          cos(4 * angle)) / 17
  return(y - mean(y))
}

heart <- tibble(
  angle = seq(0, 2 * pi, length.out = 100),
  x = heart_x(angle),
  y = heart_y(angle)
)

heart_canvas <- ggplot(heart, aes(x, y)) +
  guides(fill = guide_none()) +
  coord_equal() + 
  theme_void()
```


```{r inner-glow, dev.args=list(bg="#222222")}
#| fig-width: 4
#| fig-height: 4
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: page
heart_canvas + 
  geom_polygon(colour = NA, fill = "black")
heart_canvas +   
  with_inner_glow(
    geom_polygon(colour = NA, fill = "black"),
    colour = "white"
  )
heart_canvas +   
  with_inner_glow(
    geom_polygon(colour = NA, fill = "black"),
    colour = "white",
    sigma = 10,
    expand = 5
  )
```


## Dither

```{r}
set.seed(1)
n <- 200
polar_data <- tibble(
  x0 = runif(n),
  y0 = runif(n),
  x1 = x0 + runif(n, min = -.2, max = .2),
  y1 = y0,
  shade = runif(n), 
  size = runif(n)
)

polar_canvas <- ggplot(
  data = polar_data, 
  mapping = aes(x0, y0, xend = x1, yend = y1, colour = shade, size = size)
) + 
  coord_polar(clip = "off") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 1), oob = oob_keep) +
  scale_x_continuous(expand = c(0, 0), limits = c(0, 1), oob = oob_keep) + 
  scale_colour_gradientn(colours = sample_canva2(seed = 10)) + 
  guides(colour = guide_none(), size = guide_none()) + 
  scale_size(range = c(0, 10)) + 
  theme_void()
```


```{r dither, dev.args=list(bg="#222222")}
#| fig-width: 6
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: page
polar_canvas + geom_segment()
polar_canvas + with_dither(geom_segment(), max_colours = 6)
```


```{r halftone-dither, dev.args=list(bg="#222222")}
#| fig-width: 6
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: screen-inset
polar_canvas + geom_segment()
polar_canvas + with_halftone_dither(geom_segment())
polar_canvas + with_halftone_dither(geom_segment(), black = FALSE)
```

## Mask


```{r mask, dev.args=list(bg="#222222")}
#| fig-width: 6
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: page

palette <- c("#222222","#e83e8c")

background <- long_grid(
  x = seq(from = -1, to = 1, length.out = 1000),
  y = seq(from = -1, to = 1, length.out = 1000)
) |> 
  mutate(
    lf_noise = gen_simplex(x, y, frequency = 2, seed = 1234),
    mf_noise = gen_simplex(x, y, frequency = 20, seed = 1234),
    hf_noise = gen_simplex(x, y, frequency = 99, seed = 1234),
    paint = lf_noise + mf_noise + hf_noise
  )

hexagon <- tibble(
  theta = (1:6)/6 * 2 * pi,
  x = sin(theta),
  y = cos(theta)
)

art <- tibble(x = 0, y = 0, text = "ART")

hex_canvas <- ggplot(mapping = aes(x, y)) + 
  theme_void() +
  coord_equal() +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_gradientn(colours = palette, guide = guide_none())

hex_canvas + 
  geom_raster(data = background, mapping = aes(fill = paint)) +  
  geom_text(data = art, mapping = aes(label = text), size = 24, 
            colour = "white", fontface = "bold") + 
  geom_polygon(data = hexagon, fill = NA, colour = "white", size = 15)

hex_canvas + 
  as_group(
    geom_raster(data = background, mapping = aes(fill = paint)),
    geom_text(data = art, mapping = aes(label = text), size = 24, 
              colour = "white", fontface = "bold"),
    geom_polygon(data = hexagon, fill = NA, colour = "white", size = 15),
    id = "content"
  ) + 
  as_reference(
    geom_polygon(data = hexagon, fill = "white"), 
    id = "hexagon" 
  ) + 
  with_mask("content", "hexagon")
```


