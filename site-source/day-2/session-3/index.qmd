---
title: "PIXEL FILTERS"
---


```{r, message=FALSE}
library(dplyr)
library(tibble)
library(ggplot2)
library(ggforce)
library(ggfx)
library(flametree)
library(ambient)
```

The last technical topic I want to cover in this workshop is pixel filters, and specifically the [ggfx package](https://ggfx.data-imaginist.com/) which makes it relatively easy to use them in conjunction with ggplot2. Phrased in the most general terms, a filter is any function that takes one image as input and returns a new (presumably modified!) image as output. As an example, think about how Instagram filters work: the original photo is used as the input, and the modified one is returned as output. This filtering takes place at the pixel level, so it's not immediately obvious how we could do this with ggplot2. The way that the ggfx package handles this is to render render the image (or part of the image) off screen to obtain a representation that can be filtered. The filter is applied to that rendered image and then, when the final plot is constructed, the filtered versions are included in the final plot rather than the original ones. 

In this session I'll provide an introduction to ggfx. The API for ggfx takes a little while to wrap your head around, but once you've got a handle on it, it turns out to be a very powerful tool for generative art in R. 

## Prelude

When we dive into ggfx, it will be handy to have some data that we can use to make interesting art. For that purpose I'll rely on the [flametree package](https://flametree.djnavarro.net/) which I've used in the past to make pretty pictures of trees. The `flametree_grow()` function generates the raw data:


```{r flametree-data}
#| eval: false
tree <- flametree_grow(
  seed = 1, 
  time = 9, 
  angle = c(-15, 15, 30)
)
tree
```

```{r flametree-data-2}
#| column: page
#| echo: false
op <- options(width = 150)
tree <- flametree_grow(
  seed = 1, 
  time = 9, 
  angle = c(-15, 15, 30)
)
tree
options(op)
```

You can render the output conveniently with the help of `flametree_plot()`:

```{r flametree-plot-origin, dev.args=list(bg="#222222")}
tree |> 
  flametree_plot(
    background = "#222222", 
    palette = c("#ffffff", "#f652a0")
  )
```

The `flametree_plot()` function is fairly flexible and allows you to draw the tree in several different styles, but for the purposes of this session we'll want to write our own ggplot2 (and ggfx) code, so it may be helpful to explain what you're looking at in this `tree`. Each curved segment in the tree is drawn as a [Bézier curve](https://en.wikipedia.org/wiki/B%C3%A9zier_curve) specified by three control points whose locations are given by the `coord_x` and `coord_y` variables. Each row in the tibble refers to one control point, so there are three rows per segment. Here's the three rows that correspond to the 99th segment in the tree:

```{r flametree-segment, eval=FALSE}
tree |> filter(path_id == 99)
```

```{r flametree-segment-2}
#| column: page
#| echo: false
op <- options(width = 150)
tree |> filter(id_path == 99)
options(op)
```

The various columns here describe different aspects of the tree: there's a `seg_wid` column representing the width of each segment (usually mapped to the size aesthetic), a `seg_col` column specifying a colour (usually mapped to the colour aesthetic), etc. 

Of particular relevance here is the `id_leaf` column. This column is a logical variable that is `TRUE` only for those control points that represent the very tips of the tree: the leaves, essentially. Later on I'm going to plot the tree trunk and leaves separately, so it's convenient to have a `leaf` tibble that contains the data only for the leaf nodes:

```{r leaves}
leaf <- tree |> filter(id_leaf == TRUE)
```

Okay, now let's construct a flametree image piece by piece. I'll start with a `base` plot that specifies some stylistic choices but doesn't map any aesthetics, doesn't include any data, and doesn't have any geoms. It's a blank canvas:

```{r base-plot}
base <- ggplot() + 
  scale_size_identity() + 
  theme_void() + 
  coord_equal()
```

Now I'm going to create the individual geoms. Usually when we write ggplot2 code we just add the geoms directly to the plot, and if my only intention was to show you how flametree works I'd do that here. But later I'm going to use this in conjunction with ggfx, and the design of ggfx is such that you (usually) apply a filter to a ggplot2 layer. The ggfx code will look a lot cleaner if we store our layers as variables.

First, let's create a layer representing the `leaves`. The only thing we want to do with the `leaf` data is draw a scatter plot, and we can accomplish our goal using `geom_point()`:

```{r leaves-layer}
leaves <- geom_point(
  mapping = aes(coord_x, coord_y),
  data = leaf, 
  size = 1.3, 
  stroke = 0, 
  colour = "#e38b75"
)
```

Now we can do the same thing to create the `trunk`. What we want in this case is something *similar* to `geom_path()`, but instead of plotting paths in linear segments we want to draw Bézier curves. Conveniently for us, the ggforce package supplies the `geom_bezier()` function that does exactly this. All we need to do is make sure we specify the `group` aesthetic so that there is one curve per segment in the tree. Here's the code for doing that:

```{r trunk-layer}
trunk <- geom_bezier(
  mapping = aes(coord_x, coord_y, group = id_pathtree, size = seg_wid),
  data = tree, 
  lineend = "round", 
  colour = "#555555",
  show.legend = FALSE
)
```

Having done all the work in this piecewise manner, the code to draw the tree is as simple as adding the `trunk` and `leaves` to the `base` image:

```{r flametree-plot, dev.args=list(bg="#222222")}
#| fig-width: 4
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
base + trunk + leaves
```

Very pretty!

## Glow

```{r outer-glow, dev.args=list(bg="#222222")}
#| fig-width: 4
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: page
base + trunk + leaves
base +   
  trunk + 
  with_outer_glow(leaves, colour = "white")
base +   
  trunk + 
  with_outer_glow(leaves, colour = "white", sigma = 5, expand = 3)
```

## Dither

```{r}
set.seed(1)
polar <- tibble(
  arc_start = runif(200),
  arc_end = arc_start + runif(200, min = -.2, max = .2),
  radius = runif(200),
  shade = runif(200), 
  size = runif(200)
)

base <- ggplot(
  data = polar, 
  mapping = aes(
    x = arc_start, 
    y = radius,
    xend = arc_end, 
    yend = radius, 
    colour = shade, 
    size = size
  )
) + 
  coord_polar(clip = "off") +
  scale_y_continuous(limits = c(0, 1), oob = scales::oob_keep) +
  scale_x_continuous(limits = c(0, 1), oob = scales::oob_keep) + 
  scale_colour_viridis_c(option = "magma") +
  guides(colour = guide_none(), size = guide_none()) + 
  scale_size(range = c(0, 10)) + 
  theme_void() +
  theme(panel.background = element_rect(fill = "#aaaaaa"))
```


```{r dither, dev.args=list(bg="#222222")}
#| fig-width: 6
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: page
base + geom_segment()
base + with_dither(geom_segment(), max_colours = 5)
```


```{r halftone-dither, dev.args=list(bg="#222222")}
#| fig-width: 6
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: screen-inset
base + geom_segment()
base + with_halftone_dither(geom_segment())
with_halftone_dither(base + geom_segment())
```

## Mask


```{r mask, dev.args=list(bg="#222222")}
#| fig-width: 6
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: page

texture <- geom_raster(
  mapping = aes(x, y, fill = paint),
  data = long_grid(
    x = seq(from = -1, to = 1, length.out = 1000),
    y = seq(from = -1, to = 1, length.out = 1000)
  ) |> 
    mutate(
      lf_noise = gen_simplex(x, y, frequency = 2, seed = 1234),
      mf_noise = gen_simplex(x, y, frequency = 20, seed = 1234),
      hf_noise = gen_simplex(x, y, frequency = 99, seed = 1234),
      paint = lf_noise + mf_noise + hf_noise
    )
)

hex <- tibble(x = sin((0:6)/6 * 2 * pi), y = cos((0:6)/6 * 2 * pi))
border <- geom_path(aes(x, y), hex, colour = "white", size = 15)
frame <- geom_polygon(aes(x, y), hex, fill = "white")

text <- geom_text(
  mapping = aes(x, y, label = text), 
  dat = tibble(x = 0, y = 0, text = "ART"), 
  size = 36,
  colour = "white", 
  fontface = "bold"
) 

base <- ggplot() + 
  theme_void() +
  coord_equal() +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_gradientn(
    colours = c("#222222","#e83e8c"), 
    guide = guide_none()
  )

base + texture + text + border
base + 
  as_group(texture, text, border, id = "content") +
  as_reference(frame, id = "frame") + 
  with_mask("content", "frame")
```


## Displace

```{r displace, dev.args=list(bg="#222222")}
#| fig-width: 6
#| fig-height: 6
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: page

polygon_layer <- function(x, y, fill = "white", alpha = .5) {
  geom_polygon(aes(x, y), fill = fill, alpha = alpha)
}
poly1 <- polygon_layer(x = c(1, 0, 0), y = c(0, 0, 1))
poly2 <- polygon_layer(x = c(0, 1, 1), y = c(0, 0, 1))
poly3 <- polygon_layer(x = c(.3, 1, 1), y = c(0, 0, .7))
poly4 <- polygon_layer(x = c(0, 0, .7), y = c(.3, 1, 1))

text <- geom_text(
  mapping = aes(0.5, 0.5, label = "ART"), 
  size = 60, 
  colour = "black", 
  fontface = "bold"
)

base <- ggplot() + 
  coord_equal(xlim = c(0, 1), ylim = c(0, 1)) + 
  theme_void() + 
  theme(panel.background = element_rect(fill = "#333333"))

base + poly1 + poly2 + poly3 + poly4 + text

base + 
  as_group(poly1, poly2, poly3, poly4, id = "polygons", include = TRUE) +
  as_reference("polygons", id = "displacement_map") + 
  with_displacement(
    text,
    x_map = ch_alpha("displacement_map"),
    y_map = ch_alpha("displacement_map"), 
    x_scale = 150,
    y_scale = -150
  )
```


## Blend

```{r blend, dev.args=list(bg="#222222")}
#| fig-width: 8
#| fig-height: 8
#| fig-dpi: 300
#| fig-align: center
#| layout-nrow: 1
#| column: screen-inset
leaves <- geom_point(
  data = leaf, 
  mapping = aes(coord_x, coord_y, colour = seg_col),
  colour = "white",
  size = 2, 
  stroke = 0
)

trunk <- geom_bezier(
  data = tree,
  mapping = aes(
    x = coord_x, 
    y = coord_y, 
    size = seg_wid,
    group = id_pathtree
  ),
  colour = "white",
  lineend = "round"
)

triangle <- polygon_layer(c(-4, 2, 2), c(0, 0, 6), alpha = 1)

base <- ggplot() + 
  theme_void() +
  coord_equal(xlim = c(-3, 1), ylim = c(1, 5)) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_size_identity(guide = guide_none())

base + trunk + leaves

base +
  as_group(trunk, leaves, id = "tree") + 
  with_blend(triangle, "tree", blend_type = "xor")
```


